from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import app.database.requests as rq
from Games.Blackjack import Blackjack

play_blackjack_router = Router()


class BlackjackState(StatesGroup):
    waiting_bet = State()
    playing = State()


async def get_blackjack_keyboard(can_double: bool = True) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="bj_hit")
    builder.button(text="‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data="bj_stand")
    if can_double:
        builder.button(text="üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data="bj_double")
    builder.button(text="‚ùå –°–¥–∞—Ç—å—Å—è", callback_data="bj_surrender")
    builder.adjust(2)
    return builder


@play_blackjack_router.callback_query(F.data == "game_1")
async def start_blackjack(call: CallbackQuery, state: FSMContext):
    try:
        game = await rq.get_game_by_id(1)
        user = await rq.get_user_by_tg_id(call.from_user.id)

        if not game or not user:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        await state.set_state(BlackjackState.waiting_bet)
        await state.update_data(game_id=1, tg_id=call.from_user.id)

        await call.message.answer(
            f"üÉè –ë–ª—ç–∫–¥–∂–µ–∫ (21)\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}\n"
            f"üìå –°—Ç–∞–≤–∫–∏: {game.min_bet}-{game.max_bet}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:"
        )
        await call.answer()
    except Exception as e:
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
        await state.clear()


@play_blackjack_router.message(BlackjackState.waiting_bet, F.text)
async def process_bet(message: Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return

        bet = int(message.text)
        data = await state.get_data()
        game = await rq.get_game_by_id(data['game_id'])
        user = await rq.get_user_by_tg_id(data['tg_id'])

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if not game or not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
        if bet < game.min_bet:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.min_bet}")
            return
        if bet > game.max_bet:
            await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.max_bet}")
            return
        if bet > user.balance:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        deck = Blackjack.new_deck()
        player_hand, dealer_hand, deck = await Blackjack.deal_initial_hands(deck)
        player_sum = Blackjack.calculate_hand(player_hand)
        dealer_sum = Blackjack.calculate_hand(dealer_hand)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª—ç–∫–¥–∂–µ–∫
        blackjack = player_sum == 21
        can_double = True  # –£–¥–≤–æ–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç–∞—Ö

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            bet=bet,
            player_hand=player_hand,
            dealer_hand=dealer_hand,
            player_sum=player_sum,
            dealer_sum=dealer_sum,
            deck=deck,
            can_double=can_double
        )

        await state.set_state(BlackjackState.playing)

        if blackjack:
            await finish_blackjack_game(message, state, blackjack=True)
        else:
            keyboard = await get_blackjack_keyboard(can_double)
            await message.answer(
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {Blackjack.format_hand(player_hand)}\n"
                f"–°—É–º–º–∞: {player_sum}\n\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {Blackjack.format_hand(dealer_hand, hide_first=True)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard.as_markup()
            )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


async def finish_blackjack_game(update: Message | CallbackQuery, state: FSMContext, blackjack: bool = False):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    data = await state.get_data()
    player_hand = data['player_hand']
    dealer_hand = data['dealer_hand']
    bet = data['bet']

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–ª—ç–∫–¥–∂–µ–∫, –¥–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã
    if not blackjack:
        dealer_hand, dealer_sum = await Blackjack.dealer_play(dealer_hand, data['deck'])
    else:
        dealer_sum = Blackjack.calculate_hand(dealer_hand)

    player_sum = Blackjack.calculate_hand(player_hand)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    win_amount, result_text = await Blackjack.determine_winner(
        player_sum, dealer_sum, bet
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    user = await rq.update_user_balance(data['tg_id'], win_amount)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üÉè –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {Blackjack.format_hand(player_hand)}\n"
        f"–í–∞—à–∞ —Å—É–º–º–∞: {player_sum}\n\n"
        f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {Blackjack.format_hand(dealer_hand)}\n"
        f"–°—É–º–º–∞ –¥–∏–ª–µ—Ä–∞: {dealer_sum}\n\n"
        f"{result_text}\n"
        f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {'+' if win_amount > 0 else ''}{win_amount}\n"
        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
    )

    if isinstance(update, Message):
        await update.answer(message_text)
    else:
        await update.message.edit_text(message_text)

    await state.clear()


@play_blackjack_router.callback_query(BlackjackState.playing, F.data == "bj_hit")
async def hit_action(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        player_hand, player_sum, deck = data['player_hand'], data['player_sum'], data['deck']

        # –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É
        player_hand, player_sum, busted = await Blackjack.player_hit(player_hand, deck)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            player_hand=player_hand,
            player_sum=player_sum,
            can_double=False  # –ü–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã —É–¥–≤–æ–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        )

        if busted:
            await finish_blackjack_game(call, state)
        else:
            keyboard = await get_blackjack_keyboard(can_double=False)
            await call.message.edit_text(
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {Blackjack.format_hand(player_hand)}\n"
                f"–°—É–º–º–∞: {player_sum}\n\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {Blackjack.format_hand(data['dealer_hand'], hide_first=True)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard.as_markup()
            )
        await call.answer()
    except Exception as e:
        await call.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@play_blackjack_router.callback_query(BlackjackState.playing, F.data == "bj_stand")
async def stand_action(call: CallbackQuery, state: FSMContext):
    await finish_blackjack_game(call, state)
    await call.answer()


@play_blackjack_router.callback_query(BlackjackState.playing, F.data == "bj_double")
async def double_action(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        user = await rq.get_user_by_tg_id(data['tg_id'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–≤–æ–µ–Ω–∏—è
        if data['bet'] * 2 > user.balance:
            await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è", show_alert=True)
            return

        # –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        await state.update_data(bet=data['bet'] * 2)

        # –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
        player_hand, player_sum, _ = await Blackjack.player_hit(data['player_hand'], data['deck'])
        await state.update_data(player_hand=player_hand, player_sum=player_sum)

        await finish_blackjack_game(call, state)
        await call.answer("üí∞ –°—Ç–∞–≤–∫–∞ —É–¥–≤–æ–µ–Ω–∞")
    except Exception as e:
        await call.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@play_blackjack_router.callback_query(BlackjackState.playing, F.data == "bj_surrender")
async def surrender_action(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        surrender_amount = -data['bet'] // 2  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–∞–≤–∫–∏

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        user = await rq.update_user_balance(data['tg_id'], surrender_amount)

        await call.message.edit_text(
            f"üÉè –í—ã —Å–¥–∞–ª–∏—Å—å!\n"
            f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {abs(surrender_amount)}\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
        )
        await state.clear()
        await call.answer()
    except Exception as e:
        await call.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
