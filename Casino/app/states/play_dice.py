from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
import app.database.requests as rq
import keyboards as kb
import random
from typing import Optional, Tuple
from app.database.models import User, Game
from Games.Dice import DiceGame

play_dice_router = Router()

class DiceState(StatesGroup):
    waiting_bet = State()
    waiting_number = State()

    @staticmethod
    async def validate_bet(tg_id: int, bet: int) -> Tuple[bool, str, Optional[User], Optional[Game]]:
        user = await rq.get_user_by_tg_id(tg_id)
        game = await rq.get_game_by_id(3)  # ID –∏–≥—Ä—ã "–ö–æ—Å—Ç–∏"

        if not user or not game:
            return False, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", None, None
        if bet < game.min_bet:
            return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.min_bet}", user, game
        if bet > game.max_bet:
            return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.max_bet}", user, game
        if bet > user.balance:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", user, game
        return True, "", user, game


@play_dice_router.callback_query(F.data == "game_3")
async def start_dice(call: CallbackQuery, state: FSMContext):
    game = await rq.get_game_by_id(3)
    user = await rq.get_user_by_tg_id(call.from_user.id)

    if not game or not user:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    await state.set_state(DiceState.waiting_bet)
    await state.update_data(game_id=3, tg_id=call.from_user.id)

    await call.message.answer(
        f"üé≤ –ò–≥—Ä–∞: –ö–æ—Å—Ç–∏\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}\n"
        f"üìå –°—Ç–∞–≤–∫–∏: {game.min_bet}-{game.max_bet}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:"
    )
    await call.answer()

@play_dice_router.message(DiceState.waiting_bet, F.text)
async def process_bet(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    bet = int(message.text)
    user_id = message.from_user.id
    data = await state.get_data()
    game = await rq.get_game_by_id(data['game_id'])
    user = await rq.get_user_by_tg_id(user_id)

    if not game or not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    if bet < game.min_bet:
        await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.min_bet}")
        return
    if bet > game.max_bet:
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.max_bet}")
        return
    if bet > user.balance:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    await state.update_data(bet=bet)
    await state.set_state(DiceState.waiting_number)


    await message.answer(
        f"‚úÖ –°—Ç–∞–≤–∫–∞ {bet} –ø—Ä–∏–Ω—è—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=await kb.dice_numbers()
    )

@play_dice_router.callback_query(DiceState.waiting_number, F.data.startswith("dice_num_"))
async def process_number(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = call.from_user.id
    number = int(call.data.split("_")[2])
    dice_value, win = await DiceGame.roll(data['bet'], number)
    balance_change = win - data['bet']
    await rq.update_user_balance(tg_id, balance_change)
    user = await rq.get_user_by_tg_id(tg_id)
    result = (
        f"üé≤ –í–∞—à–µ —á–∏—Å–ª–æ: {number}\n"
        f"üéØ –í—ã–ø–∞–ª–æ: {dice_value}\n\n"
        f"üí∞ {'–í—ã–∏–≥—Ä–∞–ª–∏' if win > 0 else '–ü—Ä–æ–∏–≥—Ä–∞–ª–∏'}: {abs(balance_change)}\n"
        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
    )
    await call.message.edit_text(result)
    await state.clear()
    await call.answer()