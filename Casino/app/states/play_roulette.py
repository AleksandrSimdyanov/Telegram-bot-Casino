from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
import app.database.requests as rq
import keyboards as kb
import random
from typing import Optional, Tuple
from app.database.models import User, Game
from Games.Roulette import RouletteGame

play_roulette_router = Router()


class RouletteState(StatesGroup):
    waiting_bet = State()
    waiting_spin = State()


@play_roulette_router.callback_query(F.data == "game_2")
async def start_roulette(call: CallbackQuery, state: FSMContext):
    game = await rq.get_game_by_id(2)
    user = await rq.get_user_by_tg_id(call.from_user.id)

    if not game or not user:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    await state.set_state(RouletteState.waiting_bet)
    await state.update_data(game_id=2, tg_id=call.from_user.id)

    await call.message.answer(
        f"üé∞ –§—Ä—É–∫—Ç–æ–≤–∞—è –†—É–ª–µ—Ç–∫–∞\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}\n"
        f"üìå –°—Ç–∞–≤–∫–∏: {game.min_bet}-{game.max_bet}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:",
    )
    await call.answer()

@play_roulette_router.message(RouletteState.waiting_bet, F.text)
async def process_bet(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    bet = int(message.text)
    data = await state.get_data()
    game = await rq.get_game_by_id(data['game_id'])
    user = await rq.get_user_by_tg_id(data['tg_id'])

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
    if not game or not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    if bet < game.min_bet:
        await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.min_bet}")
        return
    if bet > game.max_bet:
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {game.max_bet}")
        return
    if bet > user.balance:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    await state.update_data(bet=bet)
    await state.set_state(RouletteState.waiting_spin)

    await message.answer(
        f"‚úÖ –°—Ç–∞–≤–∫–∞ {bet} –ø—Ä–∏–Ω—è—Ç–∞!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É:",
        reply_markup=await kb.roulette_kb()
    )

@play_roulette_router.callback_query(RouletteState.waiting_spin, F.data == "roulette_spin")
async def spin_roulette(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bet = data['bet']
    tg_id = data['tg_id']

    # –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
    wheel, win_amount, result_text = await RouletteGame.spin(bet)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    user = await rq.update_user_balance(tg_id, win_amount - bet)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    wheel_text = "\n".join([" | ".join(row) for row in wheel])
    result = (
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
        f"{wheel_text}\n\n"
        f"{result_text}\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à: {win_amount}\n"
        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
    )

    await call.message.edit_text(result)
    await state.clear()
    await call.answer()

@play_roulette_router.callback_query(F.data == "roulette_cancel")
async def cancel_roulette(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await call.answer()


